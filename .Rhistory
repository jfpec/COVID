#PREPARAR DATOS
library(readr)
library(reshape2)
library(dplyr)
library(shinyWidgets)
library(plotly)
#library(leaflet)
#library(sf)
library(rgdal)
library(spatialEco)
library(shiny)
library(tmap)
data(World)
consolidado <- read.csv("consolidado.csv")
temp <- consolidado %>% group_by(ESTADO, PAIS, Lat, Long) %>% summarise(confirmed = max(confirmed, na.rm = T))
temp <- data.frame(temp[,c("Lat","Long", "PAIS" ,"confirmed")])
temp <- subset(temp, !c(is.na(Long) | Long == 0))
coordinates(temp)= ~Long+Lat
proj4string(temp) = CRS(sf::st_crs(4326)[[2]])
pts <- data.frame(point.in.poly(temp, World)@data)
temp <- pts %>% group_by(PAIS) %>% summarise(confirmed = max(confirmed))
pts2 <- inner_join(temp, pts, by = c("PAIS", "confirmed"))
pts2 <- pts2[,c("continent", "PAIS")]
consolidado <- full_join(consolidado, pts2, by = "PAIS")
colnames(consolidado)[9]<-"CONTINENT"
consolidado$CONTINENT <- as.character(consolidado$CONTINENT)
table_f <- consolidado #as.data.frame(res_mod())
table_f$FECHA <- as.Date(table_f$FECHA, format = "%m/%d/%y")
table_f <- table_f %>% subset(FECHA > input$date[1] & FECHA <input$date[2])
table1 <- table_f %>% group_by(ESTADO, PAIS, Lat, Long) %>% summarise(confirmed = max(confirmed),
deaths = max(deaths),
recovered = max(recovered))
table <- data.frame(table1[,c("Lat","Long", "PAIS" ,"confirmed","deaths","recovered")])
table <- subset(table, !c(Long==0 | is.na(Long)))
coordinates(table)= ~Long+Lat
proj4string(table) = CRS(sf::st_crs(4326)[[2]])
ptsp <- data.frame(point.in.poly(table, World)@data)
temp <- ptsp %>% group_by(PAIS) %>% summarise(confirmed = max(confirmed, na.rm = T))
pts2 <- inner_join(temp, ptsp, by = c("PAIS", "confirmed"))
pts2 <- na.omit(pts2[,c("iso_a3", "PAIS")])
table2 <- table1 %>%
group_by(PAIS) %>%
summarise(confirmed = sum(confirmed, na.rm = T),
deaths = sum(deaths, na.rm = T),
recovered = sum(recovered, na.rm = T))
pais <- inner_join(pts2, table2, by = "PAIS")
mun_estado<- merge(World, pais, by.x ="iso_a3", by.y = "iso_a3" , all = FALSE)
mun_estado
runApp()
runApp()
runApp()
mun_estado
runApp()
runApp()
